Evan Heaton
CS 465G: Artificial Intelligence
Puzzle 1
Due Wednesday, September 7th, 2016

For my data structure, I have the following:

I have an array with 14 items:

state[0] will be in the range [0,1], representing the orientation of the puzzle (the direction of gravity, if you will).
state[1] will be in the range [0,5], representing the relative position of the two sides of the puzzle. To make a clockwise turn, decrement state[1] modulo 6. To make a counter clockwise turn, increment state[1] modulo 6.
state[2] will be an array of length 6
state[3] will be an array of length 5
...
state[7] will be an array of length 1

In these arrays, which represent the contents of the tubes on the left side of the puzzle, there will be integers that specify which balls are in the tubes. 6 represents the color for which there are 6 balls (red), 5 represents the color for which there are 5 balls (green) and so forth. 0 represents an empty slot. Also, I'm making the specification that these arrays will have the balls listed in left-to-right order, so they're more easily printed onscreen.

state[8] through state[13] are in the same format, but they represent the right side of the puzzle.

Probably should have used stacks and pointers, like others were mentioning on the discussion boards, but I'm using a language that I don't have as much experience with... So I just went with this.

_______________________________________

My randomizer function (AtomicChaosPuzzle.scramble(k) in the program) is an adapted version of Anton's method that he shared on the discussion board.
First, I scramble the puzzle from the solved state, to make sure we have a reachable state as our starting point. Legal, human scrambles.
Then, all balls are uniquely numbered. This starting scrambled state is saved, so we can come back to it later.
Now, a loop begins. I repeatedly generate [k]-length strings of "solving" moves (i.e. moves that aren't immediately undone) in this loop.
The loop continues until one of the strings of "solving" moves lands the puzzle into a potentially solved state after [k] moves.
A potentially solved state is simply a state where the tubes are aligned and all balls are on one side of the puzzle. It's referred to as a "flat-state" in the code.
Now, we know how to assign the colors to each ball such that this final state is solved.
Go back in time to the starting scrambled state and give the balls the right colors, so that after the string of "solving" moves, everything falls into place and we have a solved Atomic Chaos.
That's really all there is to it!

_______________________________________

Here's my heuristic:
max(int number_of_tubes_with_an_incorrectly_colored_ball_on_the_lower_half, int number_of_turns_to_properly_align_tubes);

I believe this should always be a lower bound on the number of moves to the solution, because a ball in the wrong tube will require at least one move to get it to the right tube.
Further, because it's in the bottom of the tube, it actually requires at minimum a flip and a turn.
You're probably thinking about a way to break this lower bound, by having the solution two moves away while also having 3 tubes on the bottom half with an incorrect ball.
However, I don't think that's possible (at least, in reachable states of the puzzle).
3 uniquely colored balls could not all drop at once into their respective tubes, unless they were spaced out at every other tube.
But, keep in mind that nothing can really "drop-in" or "drop-out" of the 1 length tube. In order for that to happen, the single length tube pair would have to either be filled with 2 balls, or 0. BUT, neither of those are reachable states.
Because you can't really use the 1 length tube, you can't space out the balls properly. So the most you could drop in would be 2 in one turn.
So, the number of tubes on the lower half of the puzzle with an incorrectly colored ball would be a valid lower bound for the number of moves to solve the Atomic Chaos Puzzle.

Also, for when all the balls are in the correct tube, the heuristic will quickly instruct the solver to align the tubes.

_______________________________________

From this assignment, I learned a lot about javascript and its limitations. It seems like it's not cut out for the sort of computation that I'm putting it through with this program.
Also, I didn't know about admissible heuristics before this assignment. Now I know how powerful they can be.
Honestly, what didn't I learn from this assignment? It's been one of the most difficult programs I've ever attempted, but it's so rewarding to finally have it working (mostly).
I know my code is very inefficient, memory-wise. I never got to implement that "deep copy" function that I desperately needed...
Honestly, the due date on this program was a little ridiculous. We had like a week and a half to figure this entire thing out, it took everyone working together on the discussion boards to figure it out!!!
Anyways, it's been kinda fun.
